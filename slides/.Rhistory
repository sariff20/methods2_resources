knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
set.seed(1000)
alpha <- 18
beta <- 2
n_obs <- 500
x <- runif(n_obs, 0, 30)
y <- alpha + beta*x + rnorm(n_obs, 0, 3)
data <- tibble(x = x, y = y)
ggplot(data, aes(x = x, y = y)) + geom_point(size = 2) + theme_bw() + labs(title = 'Simulated Data')
?rnif()
?runif()
library(tidyverse)
set.seed(1000)
alpha <- 18
beta <- 2
n_obs <- 500
x <- runif(n_obs, 0, 30)
y <- alpha + beta*x + rnorm(n_obs, 0, 3)
data <- tibble(x = x, y = y)
ggplot(data, aes(x = x, y = y)) + geom_point(size = 2) + theme_bw() + labs(title = 'Simulated Data')
ols_fit <- lm(y ~ x, data = data)
summary(ols_fit)
ols_fit$coefficients
cost_function <- function(alpha, beta, x, y){
pred_y <- alpha + beta*x
ss <- (y-pred_y)^2
return(ss)
}
cost_function(alpha,beta,x,y)
cost_function <- function(alpha, beta, x, y){
pred_y <- alpha + beta*x
ss_values <- (y-pred_y)^2
ss <- sum(ss_values)
return(ss)
}
cost_function(alpha,beta,x,y)
sum(resid(ols_fit)^2)
cost_function <- function(alpha, beta, x, y){
pred_y <- alpha + beta*x
ss_values <- (y-pred_y)^2
ss <- sum(ss_values)
return(ss)
}
cost_function(alpha,beta,x,y)
View(ols_fit)
cost_function(
alpha = ols_fit$coefficients[1][[1]],
beta = ols_fit$coefficients[2][[1]],
x = data$x,
y = data$y)
cost_function <- function(alpha, beta, x, y){
pred_y <- alpha + beta*x
ss <- sum((y-pred_y)^2)
return(ss)
}
cost_function(alpha,beta,x,y)
simulations = c()
for (i in -30:30){
mse = cost_function(
alpha = 18,
beta = i,
x = data$x,
y = data$y
)
simulations = c(simulations, mse)
}
plot(x=-30:30, y=simulations)
gradient_desc <- function(alpha, beta, x, y){
N <- le
grad_beta <- (1/N) * sum(2*x*(y-alpha-beta*x))
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 0.0,
x = data$x,
y = data$y
)
N <- length(x)
gradient_desc <- function(alpha, beta, x, y){
N <- length(x)
grad_beta <- (1/N) * sum(2*x*(y-alpha-beta*x))
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 0.0,
x = data$x,
y = data$y
)
gd <- gradient_desc(alpha,beta,x,y)
minimize_function <- function(alpha, beta, x, y, delta){
gd <- gradient_desc(alpha,beta,x,y)
d_beta <- gd * delta
new_beta <- beta - d_beta
return(new_beta)
}
delta <- 0.001
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
View(res)
grad_beta <- (1/N) * sum(2*x*(y-alpha+beta*x))
gradient_desc <- function(alpha, beta, x, y){
N <- length(x)
grad_beta <- (1/N) * sum(2*x*(y-alpha+beta*x))
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 0.0,
x = data$x,
y = data$y
)
minimize_function <- function(alpha, beta, x, y, delta){
gd <- gradient_desc(alpha,beta,x,y)
d_beta <- gd * delta
new_beta <- beta - d_beta
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(data, aes(x = x, y = y)) +
geom_point(size = 2) +
geom_abline(aes(intercept = alpha, slope = beta),
data = res, size = 0.5, color = 'red') +
theme_classic() +
geom_abline(aes(intercept = alpha, slope = beta),
data = res %>% slice_head(), size = 0.5, color = 'blue') +
geom_abline(aes(intercept = alpha, slope = beta),
data = res %>% slice_tail(), size = 0.5, color = 'green')
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
grad_beta <- (1/N) * sum(2*x*(y-alpha-beta*x))
gradient_desc <- function(alpha, beta, x, y){
N <- length(x)
grad_beta <- (1/N) * sum(2*x*(y-alpha-beta*x))
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 0.0,
x = data$x,
y = data$y
)
minimize_function <- function(alpha, beta, x, y, delta){
gd <- gradient_desc(alpha,beta,x,y)
d_beta <- gd * delta
new_beta <- beta - d_beta
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
minimize_function <- function(alpha, beta, x, y, delta){
gd <- gradient_desc(alpha,beta,x,y)
d_beta <- gd * delta
new_beta <- d_beta - beta
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
delta <- 0.001
minimize_function <- function(alpha, beta, x, y, delta){
gd <- gradient_desc(alpha,beta,x,y)
d_beta <- gd * delta
new_beta <- beta - d_beta
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
gradient_desc <- function(alpha, beta, x, y){
N <- length(x)
grad_beta <- (1/N) * sum( - 2*x*(y-alpha-beta*x))
return (grad_beta)
}
gradient_desc(
alpha = 18,
beta = 0.0,
x = data$x,
y = data$y
)
delta <- 0.001
minimize_function <- function(alpha, beta, x, y, delta){
gd <- gradient_desc(alpha,beta,x,y)
d_beta <- gd * delta
new_beta <- beta - d_beta
return(new_beta)
}
iter <- 100
res <- c(0)
for (i in 2:iter){
this_beta = res[i-1]
res[i] <- minimize_function(
alpha = alpha, beta = this_beta, x = data$x, y = data$y, delta = delta
)
}
res <- lapply(res, function(x) as.data.frame(t(x))) %>% bind_rows()
colnames(res) <- c('beta')
loss <- res %>% as_tibble() %>% rowwise() %>%
summarise(sse = cost_function(18, beta, data$x, data$y))
res <- res %>% bind_cols(loss) %>%
mutate(iteration = seq(1, 100)) %>% as_tibble()
res %>% glimpse()
ggplot(res, aes(x = iteration, y = sse)) + geom_point(size = 2) +
theme_classic() + geom_line(aes(group = 1))
