ggpubr,
ggplot2)
sum <- 0
for (i in 1:100){
sum <- sum + i
}
print(sum)
squares <- rep(NA,20)
squares[i] <- i^2
for(i in 1:20){
squares[i] <- i^2
}
sum(squares)
knitr::opts_chunk$set(echo = TRUE)
# Setting my root directory to where I have my /data folder etc. (easier for me, but personalise to your own way of working)
knitr::opts_knit$set(root.dir = "/Users/sari/Documents/aarhus/methods2/methods2_resources/classes")
library(pacman)
pacman::p_load(tidyverse,
ggpubr,
ggplot2)
sum <- 0
for (i in 1:100){
sum <- sum + i
}
print(sum)
squares <- rep(NA,20)
for(i in 1:20){
squares[i] <- i^2
}
sum(squares)
n <- 1
sum_n <- 0
while(sum_n <= 1000){
n <- n + 1
sum_n <- sum_n + n
}
print(n)
count <- 10
while(count >= 1){
if(count != 1){
print(count)
} elif{
count <- 10
while(count >= 1){
if(count != 1){
print(count)
} elif {
count <- 10
while(count >= 1){
if(count != 1){
print(count)
} else {
print(count)
print("Lift off!")
}
count <- count - 1
}
numbers <- c(-4,7,23,-120309,0)
?if
numbers <- c(-4,7,23,-120309,0)
numbers <- c(-4,7,23,-120309,0)
for(i in 1:length(numbers)){
if (numbers[i] > 0){
print("positive")
} ifelse(number[i] < 0){
for(i in 1:length(numbers)){
if (numbers[i] > 0){
print("positive")
} else if (number[i] < 0){
print("negative")
} else{
print("zero")
}
}
numbers <- c(-4,7,23,-120309,0)
for(i in 1:length(numbers)){
if (numbers[i] > 0){
print("positive")
} else if (numbers[i] < 0){
print("negative")
} else{
print("zero")
}
}
ages <- c(10,20,56,19,89,26)
for(i in 1:length(ages)){
if (ages[i] < 12){
print("child")
} else if (ages[i] >= 12 && ages[i] <= 18){
print("tennager")
} else if (ages[i] >= 19 && ages[i] <= 65){
print("adult")
} else{
print("senior")
}
}
mean_f <- function(vector){
return(mean(vector))
}
vector1 <- c(1,2,3)
vector2 <- c(-1,7,12)
mean_f(vector1)
mean_f(vector2)
area_circle_f <- function(radius){
return(pi*radius^2)
}
area_circle_f(1)
area_circle_f(12)
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sum <- sum(sample(1:6,2))
sample(1:6,2)
sample(1:6,2)
sample(1:6,2)
sample(1:6,2)
sample(1:6,2)
sample(1:6,2)
sample(1:6,2)
rolling_dice_f <- function(){
sum <- sum(sample(1:6,2))
return(sum)
}
n_sims <- 10000
sums <- rep(NA,n_sims)
for(i in 1:n_sims){
sums[i] <- rolling_dice_f()
}
hist(sums)
mean(sums)
sd(sums)
population_f <- function(p0,r,t){
p <- p0 * exp(r * t)
return(p)
}
population_size <- rep(NA,50)
population_size[1] <- population_f(100,1.02,1)
population_size[1] <- population_f(100,2,1)
population_size[1] <- population_f(100,0.02,1)
for(i in 2:50){
population_size[i] <- population_f((i-1),0.02,1)
}
population_size[1] <- population_f(100,0.02,1)
for(i in 2:50){
population_size[i] <- population_f(population_size[i-1],0.02,1)
}
hist(population_size)
plot(population_size)
# Define parameters
P0 <- 100  # Initial population size
r <- 0.02  # Growth rate (2% per year)
t <- 1:50  # Years to simulate
# Calculate population size for each year
population <- P0 * exp(r * t)
# Plot the population size each year
plot(t, population, type = "l", xlab = "Years", ylab = "Population Size", main = "Population Growth Over 50 Years")
plot(population_size)
average <- 0.07
sd <- 0.1
start_inv <- 10000
sd <- 0.1
average <- 0.07
thirty_years_f <- function(){
inv <- start_inv
for(i in 1:30){
returns <- rnorm(1,average,sd)
inv <- inv + returns
}
}
n_sims <- 1000
final_values <- rep(NA,n_sims)
thirty_years_f <- function(){
inv <- start_inv
for(i in 1:30){
returns <- rnorm(1,average,sd)
inv <- inv + returns
}
return(inv)
}
for(i in 1:n_sims){
final-values[i] <- thirty_years_f()
}
for(i in 1:n_sims){
final_values[i] <- thirty_years_f()
}
inv <- start_inv
for(i in 1:30){
returns <- rnorm(1,average,sd)
inv <- inv + returns
}
thirty_years_f <- function(){
inv <- start_inv
for(i in 1:30){
returns <- rnorm(1,average,sd)
inv <- inv + returns*inv
}
return(inv)
}
average <- 0.07
sd <- 0.1
start_inv <- 10000
thirty_years_f <- function(){
inv <- start_inv
for(i in 1:30){
returns <- rnorm(1,average,sd)
inv <- inv + returns*inv
}
return(inv)
}
n_sims <- 1000
final_values <- rep(NA,n_sims)
for(i in 1:n_sims){
final_values[i] <- thirty_years_f()
}
hist(final_values)
final_values <- rep(NA,n_sims)
final_values[1] <- start_inv
final_values <- rep(NA,n_sims)
final_values[1] <- start_inv
for(i in 2:30){
returns <- rnorm(1,average,sd)
final_values[i] <- final_values[i-1] * (1 + returns)
}
thirty_years_f <- function(
final_values <- rep(NA,n_sims)
thirty_years_f <- function(
final_values <- rep(NA,30)
thirty_years_f <- function(){
final_values <- rep(NA,30)
start_inv <- 10000
average <- 0.07
sd <- 0.1
final_values[1] <- start_inv
for(i in 2:30){
returns <- rnorm(1,average,sd)
final_values[i] <- final_values[i-1] * (1 + returns)
}
}
thirty_years_f <- function(){
final_values <- rep(NA,30)
start_inv <- 10000
average <- 0.07
sd <- 0.1
final_values[1] <- start_inv
for(i in 2:30){
returns <- rnorm(1,average,sd)
final_values[i] <- final_values[i-1] * (1 + returns)
}
return(final_values[30])
}
thirty_years_f <- function(){
portfoloi <- rep(NA,30)
start_inv <- 10000
average <- 0.07
sd <- 0.1
portfolio[1] <- start_inv
for(i in 2:30){
returns <- rnorm(1,average,sd)
portfolio[i] <- portfolio[i-1] * (1 + returns)
}
return(portfolio[30])
}
n_sims <- 1000
final_values <- rep(NA,n_sims)
for(i in 1:n_sims){
final_values[i] <- thirty_years_f()
}
thirty_years_f <- function(){
portfolio <- rep(NA,30)
start_inv <- 10000
average <- 0.07
sd <- 0.1
portfolio[1] <- start_inv
for(i in 2:30){
returns <- rnorm(1,average,sd)
portfolio[i] <- portfolio[i-1] * (1 + returns)
}
return(portfolio[30])
}
n_sims <- 1000
final_values <- rep(NA,n_sims)
for(i in 1:n_sims){
final_values[i] <- thirty_years_f()
}
hist(final_values)
# Set seed for reproducibility
set.seed(123)
# Parameters
num_simulations <- 1000
num_years <- 30
initial_investment <- 10000
mean_return <- 0.07
std_dev_return <- 0.10
# Function to simulate portfolio returns
simulate_portfolio_returns <- function(num_years, mean_return, std_dev_return) {
annual_returns <- rnorm(num_years, mean_return, std_dev_return)
portfolio_values <- numeric(num_years)
portfolio_values[1] <- initial_investment
for (i in 2:num_years) {
portfolio_values[i] <- portfolio_values[i-1] * (1 + annual_returns[i-1])
}
return(portfolio_values[num_years])
}
# Simulate portfolio values for 1000 times
final_portfolio_values <- replicate(num_simulations, simulate_portfolio_returns(num_years, mean_return, std_dev_return))
# Plot histogram of final portfolio values
hist(final_portfolio_values, breaks = 30, col = "skyblue", main = "Histogram of Final Portfolio Values", xlab = "Final Portfolio Value")
# Calculate mean and standard deviation of final portfolio values
mean_final_value <- mean(final_portfolio_values)
std_dev_final_value <- sd(final_portfolio_values)
cat("Mean final portfolio value:", mean_final_value, "\n")
cat("Standard deviation of final portfolio value:", std_dev_final_value, "\n")
thirty_years_f <- function(){
portfolio <- rep(NA,30)
start_inv <- 10000
average <- 0.07
sd <- 0.1
portfolio[1] <- start_inv
for(i in 2:30){
returns <- rnorm(1,average,sd)
portfolio[i] <- portfolio[i-1] * (1 + returns)
}
return(portfolio[30])
}
n_sims <- 1000
final_values <- rep(NA,n_sims)
for(i in 1:n_sims){
final_values[i] <- thirty_years_f()
}
hist(final_values)
mean(final_values)
sd(final_values)
# Set seed for reproducibility
set.seed(123)
# Parameters
num_simulations <- 1000
num_years <- 30
initial_investment <- 10000
mean_return <- 0.07
std_dev_return <- 0.10
# Function to simulate portfolio returns
simulate_portfolio_returns <- function(num_years, mean_return, std_dev_return) {
annual_returns <- rnorm(num_years, mean_return, std_dev_return)
portfolio_values <- numeric(num_years)
portfolio_values[1] <- initial_investment
for (i in 2:num_years) {
portfolio_values[i] <- portfolio_values[i-1] * (1 + annual_returns[i-1])
}
return(portfolio_values[num_years])
}
# Simulate portfolio values for 1000 times
final_portfolio_values <- replicate(num_simulations, simulate_portfolio_returns(num_years, mean_return, std_dev_return))
# Plot histogram of final portfolio values
hist(final_portfolio_values, breaks = 30, col = "skyblue", main = "Histogram of Final Portfolio Values", xlab = "Final Portfolio Value")
# Calculate mean and standard deviation of final portfolio values
mean_final_value <- mean(final_portfolio_values)
std_dev_final_value <- sd(final_portfolio_values)
cat("Mean final portfolio value:", mean_final_value, "\n")
cat("Standard deviation of final portfolio value:", std_dev_final_value, "\n")
values <- rbinom(1,20,0.3)
n_sims <- 1000
n_sims <- 1000
values <- rep(NA,n_sims)
for(i in 1:n_sims){
values[i] <- rbinom(1,20,0.3)
}
values <- rbinom(1000,20,0.3)
plot(values)
values <- rep(NA,20)
for(i in 0:20){
values[i] <- rbinom(i,20,0.3)
}
plot(values)
# Parameters
n <- 20  # Number of trials
p <- 0.3  # Probability of success
# Generate probabilities for each possible outcome
x <- 0:n
probabilities <- dbinom(x, size = n, prob = p)
# Create a bar plot
barplot(probabilities, names.arg = x, xlab = "Number of Successes", ylab = "Probability",
main = "Binomial Distribution (n = 20, p = 0.3)", col = "skyblue")
barplot(values)
values <- rep(NA,20)
for(i in 0:20){
values[i] <- dbinom(i,20,0.3)
}
barplot(values)
dbinom(1,20,0.3)
dbinom(1,20,0.3)
dbinom(1,20,0.3)
dbinom(2,20,0.3)
dbinom(3,20,0.3)
dbinom(4,20,0.3)
dbinom(5,20,0.3)
dbinom(6,20,0.3)
values <- rep(NA,20)
for(i in 1:20){
values[i] <- dbinom(i-1,20,0.3)
}
barplot(values)
rolls <- c(1,2,3,4,5,6)
probs_rolls <- c(0.05,0.10,0.35,0.25,0.15,0.10)
rolled_numbers <- sample(rolls,10000,replace=TRUE,probs_rolls)
hist(rolled_numbers)
mean(rolled_numbers)
sd(rolled_numbers)
height_mean <- 170
heigh_sd <- 10
n_sims
n_sims <- 1000
stim_heights(n_sims,170,10)
stim_heights <- rnorm(n_sims,170,10)
hist(stim_heights)
mean(stim_heights)
sd(heights)
sd(stim_heights)
flips <- rbinom(1000,1,0.5)
flips <- rbinom(5000,1,0.5)
flips/5000
sum(flips)
sum(flips)/5000
par(c(2,3))
par(mfrow = c(2,3))
plot1 <- density(rnorm(1000,0,1))
plot1 <- density(rnorm(1000,0,1))
plot2 <- density(rnorm(1000,7,1))
plot3 <- density(rnorm(1000,-1,1))
plot4 <- density(rnorm(1000,0,0.3))
plot5 <- density(rnorm(1000,0,6))
plot6 <- density(rnorm(1000,0,12))
par(mfrow = c(2,3))
plot1
plot2
plot3
plot4
plot5
plot6
plot1 <- density(rnorm(1000,0,1))
plot2 <- density(rnorm(1000,7,1))
plot3 <- density(rnorm(1000,-1,1))
plot4 <- density(rnorm(1000,0,0.3))
plot5 <- density(rnorm(1000,0,6))
plot6 <- density(rnorm(1000,0,12))
par(mfrow = c(2,3))
plot(plot1)
plot(plot2)
plot(plot3)
plot(plot4)
plot(plot5)
plot(plot6)
plot1 <- density(rnorm(1000,0,1))
plot2 <- density(rnorm(1000,7,1))
plot3 <- density(rnorm(1000,-1,1))
plot4 <- density(rnorm(1000,0,0.3))
plot5 <- density(rnorm(1000,0,6))
plot6 <- density(rnorm(1000,0,12))
plot(plot1)
lines(plot2)
lines(plot3)
lines(plot4)
lines(plot5)
lines(plot6)
plot1 <- density(rnorm(1000,0,1))
plot2 <- density(rnorm(1000,7,1))
plot3 <- density(rnorm(1000,-1,1))
plot4 <- density(rnorm(1000,0,0.3))
plot5 <- density(rnorm(1000,0,1.5))
plot6 <- density(rnorm(1000,0,2))
plot(plot1)
lines(plot2)
lines(plot3)
lines(plot4)
lines(plot5)
lines(plot6)
sim_poisson <- dpois(1000,3.5)
plot(sim_poisson)
sim_poisson <- rep(NA,1000)
for (i in 1:1000) {
sim_poisson[i] <- dpois(i,3.5)
}
plot(sim_poisson)
x <- 0:15  # Number of events (e.g., occurrences)
sim_poisson <- rep(NA,1000)
for (i in 1:1000) {
sim_poisson[i] <- dpois(i-1,3.5)
}
barplot(sim_poisson)
sim_poisson <- rep(NA,15)
for (i in 1:15) {
sim_poisson[i] <- dpois(i-1,3.5)
}
barplot(sim_poisson)
# Parameter
lambda <- 3.5  # Poisson parameter
# Generate values for x (number of events)
x <- 0:15  # Number of events (e.g., occurrences)
# Calculate probabilities for the Poisson distribution
probabilities <- dpois(x, lambda)
# Plot the Poisson distribution using barplot
barplot(probabilities, names.arg = x, col = "skyblue",
xlab = "Number of Events", ylab = "Probability",
main = "Poisson Distribution (lambda = 3.5)")
sim_poisson <- rep(NA,15)
for (i in 1:15) {
sim_poisson[i] <- dpois(i-1,3.5)
}
barplot(sim_poisson)
